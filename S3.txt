Text output of S2.nb

####################
# Article: Convergence-divergence models: Generalizations of phylogenetic trees modeling gene flow over time
# Journal: For peer review
# Authors: Jonathan D. Mitchell (1,2*) and Barbara R. Holland (1,2)
# Affiliations: 1) School of Natural Sciences (Mathematics), University of Tasmania, Hobart, TAS, Australia, 2) ARC Centre of Excellence for Plant Success in Nature and Agriculture, University of Tasmania, Hobart, TAS, Australia.
# Corresponding author e-mail: jonathanmitchell88@gmail.com
####################

# Markov generators of Sumner et. al. 2012

La = {{-1, 0}, {1, 0}};

Lb = {{0, 1}, {0, -1}};

# Identity matrix

Id = {{1, 0}, {0, 1}};

# Stationary distribution at the root

p0s = {{b1/(a1 + 
       b1)}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, \
{0}, {a1/(a1 + b1)}};

# 2*2 Hadamard matrix

H2 = {{1, 1}, {1, -1}};

# 16*16 Hadamard matrix

H = KroneckerProduct[H2, KroneckerProduct[H2, KroneckerProduct[H2, H2]]];

# Transition matrix for section of edge 1 below the root and not ancestral to outgroup o

M1 = FullSimplify[
   MatrixExp[(1 - t)*
      a1*(KroneckerProduct[Id, 
         KroneckerProduct[La, KroneckerProduct[La, La]]] + 
        KroneckerProduct[Id, KroneckerProduct[La, KroneckerProduct[La, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[La, KroneckerProduct[Id, La]]] + 
        KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[La, La]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[La, KroneckerProduct[Id, Id]]] + 
        KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[La, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Id, La]]]) + (1 - t)*
      b1*(KroneckerProduct[Id, 
         KroneckerProduct[Lb, KroneckerProduct[Lb, Lb]]] + 
        KroneckerProduct[Id, KroneckerProduct[Lb, KroneckerProduct[Lb, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Lb, KroneckerProduct[Id, Lb]]] + 
        KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[Lb, Lb]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Lb, KroneckerProduct[Id, Id]]] + 
        KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[Lb, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Id, Lb]]])]];

# Transition matrix for edge corresponding to parameter 2

M2 = FullSimplify[
   MatrixExp[
    a2*(KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[La, La]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[La, Id]]] + 
        KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Id, La]]]) + 
     a2*b1/a1*(KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Lb, Lb]]] + 
        KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[Lb, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Id, Lb]]])]];

# Transition matrix for edge corresponding to parameter 3

M3 = FullSimplify[
   MatrixExp[
    a3*KroneckerProduct[Id, KroneckerProduct[La, KroneckerProduct[Id, Id]]] + 
     a3*b1/a1*KroneckerProduct[Id, 
       KroneckerProduct[Lb, KroneckerProduct[Id, Id]]]]];

# Transition matrix for edge corresponding to parameter 4

M4 = FullSimplify[
   MatrixExp[
    a4*KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[Id, La]]] + 
     a4*b1/a1*KroneckerProduct[Id, 
       KroneckerProduct[Id, KroneckerProduct[Id, Lb]]]]];

# Transition matrix for edge corresponding to parameter 5

M5 = FullSimplify[
   MatrixExp[
    a5*KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[La, Id]]] + 
     a5*b1/a1*KroneckerProduct[Id, 
       KroneckerProduct[Id, KroneckerProduct[Lb, Id]]]]];

# Transition matrix for converging edges corresponding to parameter 6

M6 = FullSimplify[
   MatrixExp[
    a6*(KroneckerProduct[Id, KroneckerProduct[La, KroneckerProduct[La, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[La, KroneckerProduct[Id, Id]]] + 
        KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[La, Id]]]) + 
     a6*b1/a1*(KroneckerProduct[Id, 
         KroneckerProduct[Lb, KroneckerProduct[Lb, Id]]] + 
        KroneckerProduct[Id, KroneckerProduct[Lb, KroneckerProduct[Id, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Lb, Id]]])]];

# Transition matrix for edge corresponding to parameter 7

M7 = FullSimplify[
   MatrixExp[
    a7*KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[La, Id]]] + 
     a7*b1/a1*KroneckerProduct[Id, 
       KroneckerProduct[Id, KroneckerProduct[Lb, Id]]]]];

# Transition matrix for edge corresponding to parameter 8

M8 = FullSimplify[
   MatrixExp[
    a8*KroneckerProduct[Id, KroneckerProduct[La, KroneckerProduct[Id, Id]]] + 
     a8*b1/a1*KroneckerProduct[Id, 
       KroneckerProduct[Lb, KroneckerProduct[Id, Id]]]]];

# Transition matrix for converging edges corresponding to parameter 9

M9 = FullSimplify[
   MatrixExp[
    a9*(KroneckerProduct[Id, KroneckerProduct[La, KroneckerProduct[Id, La]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[La, KroneckerProduct[Id, Id]]] + 
        KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Id, La]]]) + 
     a9*b1/a1*(KroneckerProduct[Id, 
         KroneckerProduct[Lb, KroneckerProduct[Id, Lb]]] + 
        KroneckerProduct[Id, KroneckerProduct[Lb, KroneckerProduct[Id, Id]]] +
         KroneckerProduct[Id, 
         KroneckerProduct[Id, KroneckerProduct[Id, Lb]]])]];

# Transition matrix for edge corresponding to parameter 10

M10 = FullSimplify[
   MatrixExp[
    a10*KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[Id, La]]] +
      a10*b1/a1*
      KroneckerProduct[Id, KroneckerProduct[Id, KroneckerProduct[Id, Lb]]]]];

# Transition matrix for edge corresponding to parameter 11

M11 = FullSimplify[
   MatrixExp[
    a11*KroneckerProduct[Id, KroneckerProduct[La, KroneckerProduct[Id, Id]]] +
      a11*b1/a1*
      KroneckerProduct[Id, KroneckerProduct[Lb, KroneckerProduct[Id, Id]]]]];

# Transition matrix for section of edge 1 below the root and ancestral to o

M12 = FullSimplify[
   MatrixExp[
    t*a1*KroneckerProduct[La, 
       KroneckerProduct[Id, KroneckerProduct[Id, Id]]] + 
     t*b1*KroneckerProduct[Lb, 
       KroneckerProduct[Id, KroneckerProduct[Id, Id]]]]];

# Transformed phylogenetic tensor

P = H.M12.M11.M10.M9.M8.M7.M6.M5.M4.M3.M2.M1.p0s;

# Elements of the transformed phylogenetic tensor

q0000 = Simplify[P[[1]][[1]]];

q0001 = Simplify[P[[2]][[1]]];

q0010 = Simplify[P[[3]][[1]]];

q0011 = Simplify[P[[4]][[1]]];

q0100 = Simplify[P[[5]][[1]]];

q0101 = Simplify[P[[6]][[1]]];

q0110 = Simplify[P[[7]][[1]]];

q0111 = Simplify[P[[8]][[1]]];

q1000 = Simplify[P[[9]][[1]]];

q1001 = Simplify[P[[10]][[1]]];

q1010 = Simplify[P[[11]][[1]]];

q1011 = Simplify[P[[12]][[1]]];

q1100 = Simplify[P[[13]][[1]]];

q1101 = Simplify[P[[14]][[1]]];

q1110 = Simplify[P[[15]][[1]]];

q1111 = Simplify[P[[16]][[1]]];

# r parameters and delta

r0011 = x4*x5*x6*x7*x9*x10;

r0101 = x10*x11*(1 - x9*(1 - x2*x3*x4*x6*x8));

r0110 = x7*x8*x9*x11*(1 - x6*(1 - x2*x3*x5));

r0111 = x2*x3*x4*x5*x6*x7*x8*x9*x10*x11;

r1001 = x1*x2*x4*x9*x10;

r1010 = x1*x2*x5*x6*x7;

r1011 = x1*x2*x4*x5*x6*x7*x9*x10;

r1100 = x1*x3*x6*x8*x9*x11;

r1101 = x1*x2*x3*x4*x6*x8*x9*x10*x11;

r1110 = x1*x2*x3*x5*x6*x7*x8*x9*x11;

r1111 = x1*x7*x10*x11*(x4*x8*x9*(x2*(1 - x6) + x3*x5*x6) + x2*x5*x6*(1 - x9));

delta = x1*x2*x3*x4*x5*x6*x7*x8*x9*x10*x11;

# Elements of the phylogenetic tensor, as expressed in Section 3A of the online appendix (S1.pdf). We will show that the two forms of the phylogenetic tensor element expressions here are equal.

q0000a = 1;

q0001a = gamma;

q0010a = gamma;

q0011a = gamma^2 + (1 - gamma^2)*r0011;

q0100a = gamma;

q0101a = gamma^2 + (1 - gamma^2)*r0101;

q0110a = gamma^2 + (1 - gamma^2)*r0110;

q0111a = gamma*(gamma^2 + (1 - gamma^2)*(r0011 + r0101 + r0110 - 2*r0111));

q1000a = gamma;

q1001a = gamma^2 + (1 - gamma^2)*r1001;

q1010a = gamma^2 + (1 - gamma^2)*r1010;

q1011a = gamma*(gamma^2 + (1 - gamma^2)*(r0011 + r1001 + r1010 - 2*r1011));

q1100a = gamma^2 + (1 - gamma^2)*r1100;

q1101a = gamma*(gamma^2 + (1 - gamma^2)*(r0101 + r1001 + r1100 - 2*r1101));

q1110a = gamma*(gamma^2 + (1 - gamma^2)*(r0110 + r1010 + r1100 - 2*r1110));

q1111a = gamma^2*(gamma^2 + (1 - gamma^2)*(r0011 + r0101 + r0110 + r1001 + 
         r1010 + r1100 - 2*(r0111 + r1011 + r1101 + r1110 - 2*delta))) + (1 - 
       gamma^2)^2*r1111;

# Substitute in a1,...,a11,b1 and gamma so that q0000b,q0001b,...,q1111b are expressed in terms of the same parameters as q0000,q0001,...,q1111.

q0000b = q0000a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q0001b = q0001a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q0010b = q0010a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q0011b = q0011a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q0100b = q0100a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q0101b = q0101a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q0110b = q0110a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q0111b = q0111a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1000b = q1000a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1001b = q1001a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1010b = q1010a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1011b = q1011a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1100b = q1100a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1101b = q1101a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1110b = q1110a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

q1111b = q1111a /. {x1 -> Exp[-(a1 + b1)], x2 -> Exp[-a2*(1 + b1/a1)], 
    x3 -> Exp[-a3*(1 + b1/a1)], x4 -> Exp[-a4*(1 + b1/a1)], 
    x5 -> Exp[-a5*(1 + b1/a1)], x6 -> Exp[-a6*(1 + b1/a1)], 
    x7 -> Exp[-a7*(1 + b1/a1)], x8 -> Exp[-a8*(1 + b1/a1)], 
    x9 -> Exp[-a9*(1 + b1/a1)], x10 -> Exp[-a10*(1 + b1/a1)], 
    x11 -> Exp[-a11*(1 + b1/a1)], gamma -> (-a1 + b1)/(a1 + b1)};

# Check whether expressions are equal or not.

Simplify[q0000b - q0000]

0

Simplify[q0001b - q0001]

0

Simplify[q0010b - q0010]

0

FullSimplify[q0011b - q0011]

0

FullSimplify[q0100b - q0100]

0

FullSimplify[q0101b - q0101]

0

FullSimplify[q0110b - q0110]

0

FullSimplify[q0111b - q0111]

0

FullSimplify[q1000b - q1000]

0

FullSimplify[q1001b - q1001]

0

FullSimplify[q1010b - q1010]

0

FullSimplify[q1011b - q1011]

0

FullSimplify[q1100b - q1100]

0

FullSimplify[q1101b - q1101]

0

FullSimplify[q1110b - q1110]

0

FullSimplify[q1111b - q1111]

0

# Make the substitutions y1=x1,y2=x2,y3=x3*x8*x11,y4=x4*x10,y5=x5*x7,y6=x6,y7=x7*x8*x11,y8=x9,y9=x10*x11.

r0011a = y4*y5*y6*y8;

r0101a = y9*(1 - y8) + y2*y3*y4*y6*y8;

r0110a = y8*(y7*(1 - y6) + y2*y3*y5*y6);

r0111a = y2*y3*y4*y5*y6*y8;

r1001a = y1*y2*y4*y8;

r1010a = y1*y2*y5*y6;

r1011a = y1*y2*y4*y5*y6*y8;

r1100a = y1*y3*y6*y8;

r1101a = y1*y2*y3*y4*y6*y8;

r1110a = y1*y2*y3*y5*y6*y8;

r1111a = y1*(y2*y4*y7*y8*(1 - y6) + y3*y4*y5*y6*y8 + y2*y5*y6*y9*(1 - y8));

deltaa = y1*y2*y3*y4*y5*y6*y8;

# Substitute back in x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11.

r0011b = FullSimplify[
   r0011a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r0101b = FullSimplify[
   r0101a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r0110b = FullSimplify[
   r0110a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r0111b = FullSimplify[
   r0111a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r1001b = FullSimplify[
   r1001a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r1010b = FullSimplify[
   r1010a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r1011b = FullSimplify[
   r1011a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r1100b = FullSimplify[
   r1100a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r1101b = FullSimplify[
   r1101a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r1110b = FullSimplify[
   r1110a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

r1111b = FullSimplify[
   r1111a /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

deltab = FullSimplify[
   deltaa /. {y1 -> x1, y2 -> x2, y3 -> x3*x8*x11, y4 -> x4*x10, y5 -> x5*x7, 
     y6 -> x6, y7 -> x7*x8*x11, y8 -> x9, y9 -> x10*x11}];

# Check whether the expressions are equal or not.

FullSimplify[r0011b - r0011]

0

FullSimplify[r0101b - r0101]

0

FullSimplify[r0110b - r0110]

0

FullSimplify[r0111b - r0111]

0

FullSimplify[r1001b - r1001]

0

FullSimplify[r1010b - r1010]

0

FullSimplify[r1011b - r1011]

0

FullSimplify[r1100b - r1100]

0

FullSimplify[r1101b - r1101]

0

FullSimplify[r1110b - r1110]

0

FullSimplify[r1111b - r1111]

0

FullSimplify[deltab - delta]

0

# Solutions for the parameters, taken from the Groebner basis computed in S6.m2 and output in S7.txt.

y1 = delta/r0111;

y2 = r0111*Sqrt[r1001*r1010]/(delta*Sqrt[r0011]);

y3 = delta/Sqrt[r0011*r1001*r1010];

y4 = r1101*delta*Sqrt[r0011]/(r0111*r1100*Sqrt[r1001*r1010]);

y5 = delta/r1101;

y6 = r1101*Sqrt[r0011*r1010]/(delta*Sqrt[r1001]);

y7 = delta*(r0110*r1101*delta*Sqrt[r0011] - 
      r0111^2*r1100*Sqrt[r1001*r1010])/(r0111*r1100*
      Sqrt[r0011*r1001]*(delta*Sqrt[r1001] - r1101*Sqrt[r0011*r1010]));

y8 = r0111*r1001*r1100/(r1101*delta);

y9 = r1101*(r0101*delta - r0111*r1101)/(r1101*delta - r0111*r1001*r1100);

# Check whether the solutions are correct or not.

FullSimplify[
 y4*y5*y6*y8, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, r1001 > 0, 
  r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r0011

FullSimplify[
 y9*(1 - y8) + y2*y3*y4*y6*y8, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, 
  r1001 > 0, r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r0101

FullSimplify[
 y8*(y7*(1 - y6) + y2*y3*y5*y6), {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, 
  r1001 > 0, r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r0110

FullSimplify[
 y2*y3*y4*y5*y6*y8, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, r1001 > 0, 
  r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r0111

FullSimplify[
 y1*y2*y4*y8, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, r1001 > 0, 
  r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r1001

FullSimplify[
 y1*y2*y5*y6, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, r1001 > 0, 
  r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r1010

FullSimplify[
 y1*y3*y6*y8, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, r1001 > 0, 
  r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r1100

FullSimplify[
 y1*y2*y3*y4*y6*y8, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, r1001 > 0, 
  r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

r1101

FullSimplify[
 y1*y2*y3*y4*y5*y6*y8, {r0011 > 0, r0101 > 0, r0110 > 0, r0111 > 0, r1001 > 0,
   r1010 > 0, r1100 > 0, r1101 > 0, delta > 0}]

delta